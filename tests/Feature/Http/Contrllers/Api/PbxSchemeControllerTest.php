<?php
/**
 * Created by PhpStorm.
 * User: S.Karavaev
 * Date: 20.09.2018
 * Time: 22:54
 */

namespace Tests\Feature\Http\Contrllers\Api;

use App\Domain\Entity\PbxScheme\PbxScheme;
use App\Domain\Entity\PbxScheme\PbxSchemeNode;
use App\Domain\Entity\PbxScheme\PbxSchemeNodeRelation;
use App\Http\Requests\AbstractApiRequest;
use App\Domain\Entity\PbxScheme\NodeType;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;

class PbxSchemeControllerTest extends TestCase
{
    use DatabaseTransactions;
    use WithFaker;
    use WithoutMiddleware;

    public function setUp()
    {
        parent::setUp();
    }

    public function testCreatePbxScheme()
    {
        $nodeType1 = factory(NodeType::class)->state(NodeType::TYPE_ACTION)->create(
            [
                'name' => 'Playback',
            ]
        );
        $nodeType2 = factory(NodeType::class)->state(NodeType::TYPE_ACTION)->create(
            [
                'name' => 'Dial',
            ]
        );

        $data = [
            'nodes'     => [
                [
                    'tmp_id'       => 'd87jdo90s',
                    'node_type_id' => $nodeType1->id,
                    'data'         => [
                        'filename' => 'helloworld',
                    ],
                ],
                [
                    'tmp_id'       => 'd87j923hdk',
                    'node_type_id' => $nodeType2->id,
                    'data'         => [
                        'endpoint'      => '305',
                        'music_on_hold' => 'default',
                    ],
                ],
            ],
            'relations' => [
                [
                    'type'      => 'positive',
                    'from_node' => 'd87jdo90s',
                    'to_node'   => 'd87j923hdk',
                ],
            ],
        ];

        $response = $this->json(
            'POST',
            '/api/1.0/pbx-scheme',
            $data,
            [
                AbstractApiRequest::CUSTOM_HEADER_USER_ID => $this->faker->uuid,
            ]
        );
        dd($response->getContent());
        $response->assertOk();
        $response->assertJsonStructure(
            [
                'id',
            ]
        );
    }

    public function testGetPbxSchemeById()
    {
        $pbxScheme = factory(PbxScheme::class)->create();

        $nodeTypePlayback = factory(NodeType::class)->state(NodeType::TYPE_ACTION)->create(
            [
                'name' => 'Playback',
            ]
        );
        $nodeTypeDial     = factory(NodeType::class)->state(NodeType::TYPE_ACTION)->create(
            [
                'name' => 'Dial',
            ]
        );

        $nodeDial = factory(PbxSchemeNode::class)->state('dial')->create(
            [
                'pbx_scheme_id' => $pbxScheme->id,
                'node_type_id'  => $nodeTypeDial->id,
            ]
        );

        $nodePlayback = factory(PbxSchemeNode::class)->state('playback')->create(
            [
                'pbx_scheme_id' => $pbxScheme->id,
                'node_type_id'  => $nodeTypePlayback->id,
            ]
        );

        factory(PbxSchemeNodeRelation::class)->state('direct')->create(
            [
                'from_node_id' => $nodePlayback->id,
                'to_node_id'   => $nodeDial->id,
                'pbx_scheme_id'  => $pbxScheme->id,
            ]
        );

        $response = $this->json('GET', '/api/v1/pbx-scheme/' . $pbxScheme->id);

        $response->assertOk();

        $response->assertJsonStructure(
            [
                'data' => [
                    'id',
                    'nodes',
                    'node_relations'
                ],
            ]
        );
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
